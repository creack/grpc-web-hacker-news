// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/hackernews.proto

package grpc_web_hacker_news

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Story struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Score                int32    `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
	Title                string   `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	By                   string   `protobuf:"bytes,4,opt,name=by,proto3" json:"by,omitempty"`
	Time                 int32    `protobuf:"varint,5,opt,name=time,proto3" json:"time,omitempty"`
	Url                  string   `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Story) Reset()         { *m = Story{} }
func (m *Story) String() string { return proto.CompactTextString(m) }
func (*Story) ProtoMessage()    {}
func (*Story) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c445d3ac23a9ffb, []int{0}
}

func (m *Story) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Story.Unmarshal(m, b)
}
func (m *Story) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Story.Marshal(b, m, deterministic)
}
func (m *Story) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Story.Merge(m, src)
}
func (m *Story) XXX_Size() int {
	return xxx_messageInfo_Story.Size(m)
}
func (m *Story) XXX_DiscardUnknown() {
	xxx_messageInfo_Story.DiscardUnknown(m)
}

var xxx_messageInfo_Story proto.InternalMessageInfo

func (m *Story) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Story) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *Story) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Story) GetBy() string {
	if m != nil {
		return m.By
	}
	return ""
}

func (m *Story) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *Story) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type ListStoriesResponse struct {
	Story                *Story   `protobuf:"bytes,1,opt,name=story,proto3" json:"story,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListStoriesResponse) Reset()         { *m = ListStoriesResponse{} }
func (m *ListStoriesResponse) String() string { return proto.CompactTextString(m) }
func (*ListStoriesResponse) ProtoMessage()    {}
func (*ListStoriesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c445d3ac23a9ffb, []int{1}
}

func (m *ListStoriesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListStoriesResponse.Unmarshal(m, b)
}
func (m *ListStoriesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListStoriesResponse.Marshal(b, m, deterministic)
}
func (m *ListStoriesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListStoriesResponse.Merge(m, src)
}
func (m *ListStoriesResponse) XXX_Size() int {
	return xxx_messageInfo_ListStoriesResponse.Size(m)
}
func (m *ListStoriesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListStoriesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListStoriesResponse proto.InternalMessageInfo

func (m *ListStoriesResponse) GetStory() *Story {
	if m != nil {
		return m.Story
	}
	return nil
}

type ListStoriesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListStoriesRequest) Reset()         { *m = ListStoriesRequest{} }
func (m *ListStoriesRequest) String() string { return proto.CompactTextString(m) }
func (*ListStoriesRequest) ProtoMessage()    {}
func (*ListStoriesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c445d3ac23a9ffb, []int{2}
}

func (m *ListStoriesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListStoriesRequest.Unmarshal(m, b)
}
func (m *ListStoriesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListStoriesRequest.Marshal(b, m, deterministic)
}
func (m *ListStoriesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListStoriesRequest.Merge(m, src)
}
func (m *ListStoriesRequest) XXX_Size() int {
	return xxx_messageInfo_ListStoriesRequest.Size(m)
}
func (m *ListStoriesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListStoriesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListStoriesRequest proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Story)(nil), "grpc_web_hacker_news.Story")
	proto.RegisterType((*ListStoriesResponse)(nil), "grpc_web_hacker_news.ListStoriesResponse")
	proto.RegisterType((*ListStoriesRequest)(nil), "grpc_web_hacker_news.ListStoriesRequest")
}

func init() { proto.RegisterFile("proto/hackernews.proto", fileDescriptor_0c445d3ac23a9ffb) }

var fileDescriptor_0c445d3ac23a9ffb = []byte{
	// 241 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x50, 0xbd, 0x4e, 0xc3, 0x30,
	0x10, 0x56, 0xd2, 0xba, 0x12, 0x57, 0x09, 0xc1, 0x11, 0x21, 0x0b, 0x96, 0x2a, 0x53, 0x58, 0x02,
	0x94, 0x97, 0xe8, 0x80, 0x18, 0xd2, 0x07, 0x88, 0x48, 0x72, 0x02, 0x8b, 0x52, 0x07, 0x9f, 0x4b,
	0xe4, 0xb7, 0x47, 0x3e, 0x2f, 0x20, 0x3a, 0x74, 0xbb, 0xfb, 0xfe, 0xfc, 0xf9, 0xe0, 0x7a, 0x74,
	0xd6, 0xdb, 0xfb, 0xf7, 0xd7, 0xfe, 0x83, 0xdc, 0x9e, 0x26, 0xae, 0x05, 0xc0, 0xe2, 0xcd, 0x8d,
	0x7d, 0x3b, 0x51, 0xd7, 0x26, 0xaa, 0x8d, 0x5c, 0x19, 0x40, 0x6d, 0xbd, 0x75, 0x01, 0xcf, 0x21,
	0x37, 0x83, 0xce, 0x56, 0x59, 0xa5, 0x9a, 0xdc, 0x0c, 0x58, 0x80, 0xe2, 0xde, 0x3a, 0xd2, 0xb9,
	0x40, 0x69, 0x89, 0xa8, 0x37, 0x7e, 0x47, 0x7a, 0xb6, 0xca, 0xaa, 0xb3, 0x26, 0x2d, 0xd1, 0xdb,
	0x05, 0x3d, 0x17, 0x28, 0xef, 0x02, 0x22, 0xcc, 0xbd, 0xf9, 0x24, 0xad, 0xc4, 0x2a, 0x33, 0x5e,
	0xc0, 0xec, 0xe0, 0x76, 0x7a, 0x21, 0xa2, 0x38, 0x96, 0x1b, 0xb8, 0x7a, 0x36, 0xec, 0xe3, 0xf3,
	0x86, 0xb8, 0x21, 0x1e, 0xed, 0x9e, 0x09, 0x1f, 0x41, 0x71, 0x6c, 0x24, 0x5d, 0x96, 0xeb, 0xdb,
	0xfa, 0x58, 0xef, 0x5a, 0x4a, 0x37, 0x49, 0x59, 0x16, 0x80, 0x7f, 0x92, 0xbe, 0x0e, 0xc4, 0x7e,
	0x1d, 0xe0, 0x72, 0x23, 0x8e, 0x17, 0x9a, 0x78, 0x4b, 0xee, 0xdb, 0xf4, 0x84, 0x03, 0x2c, 0x7f,
	0x49, 0xb1, 0x3a, 0x9e, 0xfe, 0x3f, 0xed, 0xe6, 0xee, 0x04, 0x65, 0xfa, 0xc1, 0x43, 0xd6, 0x2d,
	0xe4, 0xe4, 0x4f, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x45, 0x1a, 0xba, 0x9a, 0x8c, 0x01, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HackerNewsServiceClient is the client API for HackerNewsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HackerNewsServiceClient interface {
	ListStories(ctx context.Context, in *ListStoriesRequest, opts ...grpc.CallOption) (HackerNewsService_ListStoriesClient, error)
}

type hackerNewsServiceClient struct {
	cc *grpc.ClientConn
}

func NewHackerNewsServiceClient(cc *grpc.ClientConn) HackerNewsServiceClient {
	return &hackerNewsServiceClient{cc}
}

func (c *hackerNewsServiceClient) ListStories(ctx context.Context, in *ListStoriesRequest, opts ...grpc.CallOption) (HackerNewsService_ListStoriesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HackerNewsService_serviceDesc.Streams[0], "/grpc_web_hacker_news.HackerNewsService/ListStories", opts...)
	if err != nil {
		return nil, err
	}
	x := &hackerNewsServiceListStoriesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HackerNewsService_ListStoriesClient interface {
	Recv() (*ListStoriesResponse, error)
	grpc.ClientStream
}

type hackerNewsServiceListStoriesClient struct {
	grpc.ClientStream
}

func (x *hackerNewsServiceListStoriesClient) Recv() (*ListStoriesResponse, error) {
	m := new(ListStoriesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HackerNewsServiceServer is the server API for HackerNewsService service.
type HackerNewsServiceServer interface {
	ListStories(*ListStoriesRequest, HackerNewsService_ListStoriesServer) error
}

// UnimplementedHackerNewsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedHackerNewsServiceServer struct {
}

func (*UnimplementedHackerNewsServiceServer) ListStories(req *ListStoriesRequest, srv HackerNewsService_ListStoriesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListStories not implemented")
}

func RegisterHackerNewsServiceServer(s *grpc.Server, srv HackerNewsServiceServer) {
	s.RegisterService(&_HackerNewsService_serviceDesc, srv)
}

func _HackerNewsService_ListStories_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListStoriesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HackerNewsServiceServer).ListStories(m, &hackerNewsServiceListStoriesServer{stream})
}

type HackerNewsService_ListStoriesServer interface {
	Send(*ListStoriesResponse) error
	grpc.ServerStream
}

type hackerNewsServiceListStoriesServer struct {
	grpc.ServerStream
}

func (x *hackerNewsServiceListStoriesServer) Send(m *ListStoriesResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _HackerNewsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_web_hacker_news.HackerNewsService",
	HandlerType: (*HackerNewsServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListStories",
			Handler:       _HackerNewsService_ListStories_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/hackernews.proto",
}
